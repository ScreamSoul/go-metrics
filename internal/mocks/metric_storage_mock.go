// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks


import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/screamsoul/go-metrics-tpl/internal/models/metrics"
)

// MetricStorageMock implements MetricStorage
type MetricStorageMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAdd          func(m metrics.Metrics)
	inspectFuncAdd   func(m metrics.Metrics)
	afterAddCounter  uint64
	beforeAddCounter uint64
	AddMock          mMetricStorageMockAdd

	funcGet          func(m *metrics.Metrics) (err error)
	inspectFuncGet   func(m *metrics.Metrics)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mMetricStorageMockGet

	funcList          func() (ma1 []metrics.Metrics)
	inspectFuncList   func()
	afterListCounter  uint64
	beforeListCounter uint64
	ListMock          mMetricStorageMockList
}

// NewMetricStorageMock returns a mock for MetricStorage
func NewMetricStorageMock(t minimock.Tester) *MetricStorageMock {
	m := &MetricStorageMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddMock = mMetricStorageMockAdd{mock: m}
	m.AddMock.callArgs = []*MetricStorageMockAddParams{}

	m.GetMock = mMetricStorageMockGet{mock: m}
	m.GetMock.callArgs = []*MetricStorageMockGetParams{}

	m.ListMock = mMetricStorageMockList{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMetricStorageMockAdd struct {
	mock               *MetricStorageMock
	defaultExpectation *MetricStorageMockAddExpectation
	expectations       []*MetricStorageMockAddExpectation

	callArgs []*MetricStorageMockAddParams
	mutex    sync.RWMutex
}

// MetricStorageMockAddExpectation specifies expectation struct of the MetricStorage.Add
type MetricStorageMockAddExpectation struct {
	mock   *MetricStorageMock
	params *MetricStorageMockAddParams

	Counter uint64
}

// MetricStorageMockAddParams contains parameters of the MetricStorage.Add
type MetricStorageMockAddParams struct {
	m metrics.Metrics
}

// Expect sets up expected params for MetricStorage.Add
func (mmAdd *mMetricStorageMockAdd) Expect(m metrics.Metrics) *mMetricStorageMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("MetricStorageMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &MetricStorageMockAddExpectation{}
	}

	mmAdd.defaultExpectation.params = &MetricStorageMockAddParams{m}
	for _, e := range mmAdd.expectations {
		if minimock.Equal(e.params, mmAdd.defaultExpectation.params) {
			mmAdd.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAdd.defaultExpectation.params)
		}
	}

	return mmAdd
}

// Inspect accepts an inspector function that has same arguments as the MetricStorage.Add
func (mmAdd *mMetricStorageMockAdd) Inspect(f func(m metrics.Metrics)) *mMetricStorageMockAdd {
	if mmAdd.mock.inspectFuncAdd != nil {
		mmAdd.mock.t.Fatalf("Inspect function is already set for MetricStorageMock.Add")
	}

	mmAdd.mock.inspectFuncAdd = f

	return mmAdd
}

// Return sets up results that will be returned by MetricStorage.Add
func (mmAdd *mMetricStorageMockAdd) Return() *MetricStorageMock {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("MetricStorageMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &MetricStorageMockAddExpectation{mock: mmAdd.mock}
	}

	return mmAdd.mock
}

// Set uses given function f to mock the MetricStorage.Add method
func (mmAdd *mMetricStorageMockAdd) Set(f func(m metrics.Metrics)) *MetricStorageMock {
	if mmAdd.defaultExpectation != nil {
		mmAdd.mock.t.Fatalf("Default expectation is already set for the MetricStorage.Add method")
	}

	if len(mmAdd.expectations) > 0 {
		mmAdd.mock.t.Fatalf("Some expectations are already set for the MetricStorage.Add method")
	}

	mmAdd.mock.funcAdd = f
	return mmAdd.mock
}

// Add implements MetricStorage
func (mmAdd *MetricStorageMock) Add(m metrics.Metrics) {
	mm_atomic.AddUint64(&mmAdd.beforeAddCounter, 1)
	defer mm_atomic.AddUint64(&mmAdd.afterAddCounter, 1)

	if mmAdd.inspectFuncAdd != nil {
		mmAdd.inspectFuncAdd(m)
	}

	mm_params := MetricStorageMockAddParams{m}

	// Record call args
	mmAdd.AddMock.mutex.Lock()
	mmAdd.AddMock.callArgs = append(mmAdd.AddMock.callArgs, &mm_params)
	mmAdd.AddMock.mutex.Unlock()

	for _, e := range mmAdd.AddMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAdd.AddMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAdd.AddMock.defaultExpectation.Counter, 1)
		mm_want := mmAdd.AddMock.defaultExpectation.params
		mm_got := MetricStorageMockAddParams{m}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAdd.t.Errorf("MetricStorageMock.Add got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAdd.funcAdd != nil {
		mmAdd.funcAdd(m)
		return
	}
	mmAdd.t.Fatalf("Unexpected call to MetricStorageMock.Add. %v", m)

}

// AddAfterCounter returns a count of finished MetricStorageMock.Add invocations
func (mmAdd *MetricStorageMock) AddAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.afterAddCounter)
}

// AddBeforeCounter returns a count of MetricStorageMock.Add invocations
func (mmAdd *MetricStorageMock) AddBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.beforeAddCounter)
}

// Calls returns a list of arguments used in each call to MetricStorageMock.Add.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAdd *mMetricStorageMockAdd) Calls() []*MetricStorageMockAddParams {
	mmAdd.mutex.RLock()

	argCopy := make([]*MetricStorageMockAddParams, len(mmAdd.callArgs))
	copy(argCopy, mmAdd.callArgs)

	mmAdd.mutex.RUnlock()

	return argCopy
}

// MinimockAddDone returns true if the count of the Add invocations corresponds
// the number of defined expectations
func (m *MetricStorageMock) MinimockAddDone() bool {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddInspect logs each unmet expectation
func (m *MetricStorageMock) MinimockAddInspect() {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricStorageMock.Add with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		if m.AddMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MetricStorageMock.Add")
		} else {
			m.t.Errorf("Expected call to MetricStorageMock.Add with params: %#v", *m.AddMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		m.t.Error("Expected call to MetricStorageMock.Add")
	}
}

type mMetricStorageMockGet struct {
	mock               *MetricStorageMock
	defaultExpectation *MetricStorageMockGetExpectation
	expectations       []*MetricStorageMockGetExpectation

	callArgs []*MetricStorageMockGetParams
	mutex    sync.RWMutex
}

// MetricStorageMockGetExpectation specifies expectation struct of the MetricStorage.Get
type MetricStorageMockGetExpectation struct {
	mock    *MetricStorageMock
	params  *MetricStorageMockGetParams
	results *MetricStorageMockGetResults
	Counter uint64
}

// MetricStorageMockGetParams contains parameters of the MetricStorage.Get
type MetricStorageMockGetParams struct {
	m *metrics.Metrics
}

// MetricStorageMockGetResults contains results of the MetricStorage.Get
type MetricStorageMockGetResults struct {
	err error
}

// Expect sets up expected params for MetricStorage.Get
func (mmGet *mMetricStorageMockGet) Expect(m *metrics.Metrics) *mMetricStorageMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("MetricStorageMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &MetricStorageMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &MetricStorageMockGetParams{m}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the MetricStorage.Get
func (mmGet *mMetricStorageMockGet) Inspect(f func(m *metrics.Metrics)) *mMetricStorageMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for MetricStorageMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by MetricStorage.Get
func (mmGet *mMetricStorageMockGet) Return(err error) *MetricStorageMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("MetricStorageMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &MetricStorageMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &MetricStorageMockGetResults{err}
	return mmGet.mock
}

// Set uses given function f to mock the MetricStorage.Get method
func (mmGet *mMetricStorageMockGet) Set(f func(m *metrics.Metrics) (err error)) *MetricStorageMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the MetricStorage.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the MetricStorage.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the MetricStorage.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mMetricStorageMockGet) When(m *metrics.Metrics) *MetricStorageMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("MetricStorageMock.Get mock is already set by Set")
	}

	expectation := &MetricStorageMockGetExpectation{
		mock:   mmGet.mock,
		params: &MetricStorageMockGetParams{m},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up MetricStorage.Get return parameters for the expectation previously defined by the When method
func (e *MetricStorageMockGetExpectation) Then(err error) *MetricStorageMock {
	e.results = &MetricStorageMockGetResults{err}
	return e.mock
}

// Get implements MetricStorage
func (mmGet *MetricStorageMock) Get(m *metrics.Metrics) (err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(m)
	}

	mm_params := MetricStorageMockGetParams{m}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := MetricStorageMockGetParams{m}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("MetricStorageMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results != nil {
			return (*mm_results).err
		}
		mmGet.t.Fatal("No results are set for the MetricStorageMock.Get")
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(m)
	}
	mmGet.t.Fatalf("Unexpected call to MetricStorageMock.Get. %v", m)
	return
}

// GetAfterCounter returns a count of finished MetricStorageMock.Get invocations
func (mmGet *MetricStorageMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of MetricStorageMock.Get invocations
func (mmGet *MetricStorageMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to MetricStorageMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mMetricStorageMockGet) Calls() []*MetricStorageMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*MetricStorageMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *MetricStorageMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *MetricStorageMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MetricStorageMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MetricStorageMock.Get")
		} else {
			m.t.Errorf("Expected call to MetricStorageMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to MetricStorageMock.Get")
	}
}

type mMetricStorageMockList struct {
	mock               *MetricStorageMock
	defaultExpectation *MetricStorageMockListExpectation
	expectations       []*MetricStorageMockListExpectation
}

// MetricStorageMockListExpectation specifies expectation struct of the MetricStorage.List
type MetricStorageMockListExpectation struct {
	mock *MetricStorageMock

	results *MetricStorageMockListResults
	Counter uint64
}

// MetricStorageMockListResults contains results of the MetricStorage.List
type MetricStorageMockListResults struct {
	ma1 []metrics.Metrics
}

// Expect sets up expected params for MetricStorage.List
func (mmList *mMetricStorageMockList) Expect() *mMetricStorageMockList {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("MetricStorageMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &MetricStorageMockListExpectation{}
	}

	return mmList
}

// Inspect accepts an inspector function that has same arguments as the MetricStorage.List
func (mmList *mMetricStorageMockList) Inspect(f func()) *mMetricStorageMockList {
	if mmList.mock.inspectFuncList != nil {
		mmList.mock.t.Fatalf("Inspect function is already set for MetricStorageMock.List")
	}

	mmList.mock.inspectFuncList = f

	return mmList
}

// Return sets up results that will be returned by MetricStorage.List
func (mmList *mMetricStorageMockList) Return(ma1 []metrics.Metrics) *MetricStorageMock {
	if mmList.mock.funcList != nil {
		mmList.mock.t.Fatalf("MetricStorageMock.List mock is already set by Set")
	}

	if mmList.defaultExpectation == nil {
		mmList.defaultExpectation = &MetricStorageMockListExpectation{mock: mmList.mock}
	}
	mmList.defaultExpectation.results = &MetricStorageMockListResults{ma1}
	return mmList.mock
}

// Set uses given function f to mock the MetricStorage.List method
func (mmList *mMetricStorageMockList) Set(f func() (ma1 []metrics.Metrics)) *MetricStorageMock {
	if mmList.defaultExpectation != nil {
		mmList.mock.t.Fatalf("Default expectation is already set for the MetricStorage.List method")
	}

	if len(mmList.expectations) > 0 {
		mmList.mock.t.Fatalf("Some expectations are already set for the MetricStorage.List method")
	}

	mmList.mock.funcList = f
	return mmList.mock
}

// List implements MetricStorage
func (mmList *MetricStorageMock) List() (ma1 []metrics.Metrics) {
	mm_atomic.AddUint64(&mmList.beforeListCounter, 1)
	defer mm_atomic.AddUint64(&mmList.afterListCounter, 1)

	if mmList.inspectFuncList != nil {
		mmList.inspectFuncList()
	}

	if mmList.ListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmList.ListMock.defaultExpectation.Counter, 1)

		mm_results := mmList.ListMock.defaultExpectation.results
		if mm_results != nil {
			return (*mm_results).ma1
		}
		mmList.t.Fatal("No results are set for the MetricStorageMock.List")

	}
	if mmList.funcList != nil {
		return mmList.funcList()
	}
	mmList.t.Fatalf("Unexpected call to MetricStorageMock.List.")
	return
}

// ListAfterCounter returns a count of finished MetricStorageMock.List invocations
func (mmList *MetricStorageMock) ListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.afterListCounter)
}

// ListBeforeCounter returns a count of MetricStorageMock.List invocations
func (mmList *MetricStorageMock) ListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmList.beforeListCounter)
}

// MinimockListDone returns true if the count of the List invocations corresponds
// the number of defined expectations
func (m *MetricStorageMock) MinimockListDone() bool {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		return false
	}
	return true
}

// MinimockListInspect logs each unmet expectation
func (m *MetricStorageMock) MinimockListInspect() {
	for _, e := range m.ListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricStorageMock.List")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		m.t.Error("Expected call to MetricStorageMock.List")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcList != nil && mm_atomic.LoadUint64(&m.afterListCounter) < 1 {
		m.t.Error("Expected call to MetricStorageMock.List")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetricStorageMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddInspect()

			m.MinimockGetInspect()

			m.MinimockListInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetricStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetricStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddDone() &&
		m.MinimockGetDone() &&
		m.MinimockListDone()
}
